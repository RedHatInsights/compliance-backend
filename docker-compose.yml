# This docker-compose file will stand up the entire stack including ingress and inventory.
version: "3"
services:
  zookeeper:
    image: quay.io/cloudservices/cp-zookeeper
    environment:
      - ZOOKEEPER_CLIENT_PORT=32181
      - ZOOKEEPER_SERVER_ID=1
      - KAFKA_OPTS=-Dzookeeper.admin.enableServer=false
  kafka:
    image: quay.io/cloudservices/cp-kafka
    ports:
      - 29092:29092
    depends_on:
      - zookeeper
    links:
      - zookeeper
    environment:
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:29092
      - KAFKA_BROKER_ID=1
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:32181
  createtopics:
    image: quay.io/cloudservices/cp-kafka
    depends_on:
      - kafka
    links:
      - kafka
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
                       kafka-topics --create --if-not-exists --topic platform.upload.announce --bootstrap-server kafka:29092'"
  puptoo:
    image: quay.io/cloudservices/insights-puptoo:latest
    environment:
      - REJECTION_TOPIC=platform.upload.validation
      - LOGLEVEL=INFO
      - PROMETHEUS_PORT=8001
    depends_on:
      - kafka
      - createtopics
    links:
      - kafka
  minio:
    image: quay.io/cloudservices/minio
    command: server /data
    volumes:
      - /data
    ports:
      - 9000:9000
    env_file: .env
  createbuckets:
    image: docker.io/minio/mc
    depends_on:
      - minio
    links:
      - minio
    entrypoint: /bin/sh
    command: -c '
      until /usr/bin/mc config host add myminio http://minio:9000 $MINIO_ACCESS_KEY $MINIO_SECRET_KEY >/dev/null; do sleep 1; done ;
      /usr/bin/mc mb myminio/insights-upload-perma;
      /usr/bin/mc mb myminio/insights-upload-rejected;
      /usr/bin/mc policy set download myminio/insights-upload-perma;
      /usr/bin/mc policy set download myminio/insights-upload-rejected;
      exit 0;'
    volumes:
      - /data
    env_file: .env
  ingress:
    image: quay.io/cloudservices/insights-ingress:latest
    environment:
      - AWS_ACCESS_KEY_ID=$MINIO_ACCESS_KEY
      - AWS_SECRET_ACCESS_KEY=$MINIO_SECRET_KEY
      - AWS_REGION=us-east-1
      - INGRESS_STAGEBUCKET=insights-upload-perma
      - INGRESS_REJECTBUCKET=insights-upload-rejected
      - INGRESS_VALIDTOPICS=testareno,advisor,buckit,compliance # if you test a different topic, add it here
      - INGRESS_INVENTORYURL=inventory-web:8081/api/inventory/v1/hosts
      - OPENSHIFT_BUILD_COMMIT=woopwoop
      - INGRESS_PORT=8080
      - INGRESS_WEBPORT=8080
      - INGRESS_METRICSPORT=3001
      - INGRESS_MINIODEV=true
      - INGRESS_MINIOACCESSKEY=$MINIO_ACCESS_KEY
      - INGRESS_MINIOSECRETKEY=$MINIO_SECRET_KEY
      - INGRESS_MINIOENDPOINT=minio:9000
      - INGRESS_MAXSIZE=104857600 # 100 MB
    env_file: .env
    ports:
      - 8080:8080
    depends_on:
      - kafka
    links:
      - kafka
  db:
    image: docker.io/library/postgres
    restart: always
    environment:
      POSTGRES_PASSWORD: insights
      POSTGRES_USER: insights
      POSTGRES_DB: insights
    ports:
      - 5432:5432
    volumes:
      - /var/lib/postgresql/data
  rbac:
    image: quay.io/cloudservices/rbac:latest
    restart: on-failure
    environment:
      - REDIS_PORT=6379
      - REDIS_HOST=redis
      - DATABASE_HOST=db
      - DATABASE_PORT=5432
      - DATABASE_NAME=insights
      - DATABASE_USER=insights
      - DATABASE_PASSWORD=insights
      - API_PATH_PREFIX=/api/rbac
      - DEVELOPMENT=False
      - BYPASS_BOP_VERIFICATION=True
    depends_on:
      - build-rbac-db
      - db
      - redis
    links:
      - db
      - redis
    ports:
      - 9002:8080
    volumes:
      - ./config/devel/rbac/permissions.json:/opt/app-root/src/rbac/management/role/permissions/compliance.json:z
      - ./config/devel/rbac/definitions.json:/opt/app-root/src/rbac/management/role/definitions/compliance.json:z
  build-rbac-db:
    image: quay.io/cloudservices/rbac:latest
    environment:
      - DATABASE_HOST=db
      - DATABASE_PORT=5432
      - DATABASE_NAME=insights
      - DATABASE_USER=insights
      - DATABASE_PASSWORD=insights
      - TENANT_PARALLEL_MIGRATION_MAX_PROCESSES=4
      - TENANT_PARALLEL_MIGRATION_CHUNKS=2
      - ACCESS_CACHE_CONNECT_SIGNALS=False
      - MAX_SEED_THREADS=2
    depends_on:
      - db
    links:
      - db
    volumes:
      - ./config/devel/rbac/permissions.json:/opt/app-root/src/rbac/management/role/permissions/compliance.json:z
      - ./config/devel/rbac/definitions.json:/opt/app-root/src/rbac/management/role/definitions/compliance.json:z
    entrypoint: /bin/sh
    command: -c './rbac/manage.py migrate ; ./rbac/manage.py seeds'
  inventory:
    image: quay.io/cloudservices/insights-inventory:latest
    command: bash -c 'sleep 10 && make upgrade_db && make run_inv_mq_service'
    environment:
      - INVENTORY_DB_HOST=db
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - INVENTORY_LOG_LEVEL=ERROR
      - KAFKA_SECONDARY_TOPIC_ENABLED=True
    depends_on:
      - db
      - kafka
    links:
      - db
      - kafka
    restart: on-failure
  inventory-web:
    image: quay.io/cloudservices/insights-inventory:latest
    command: bash -c 'sleep 10 && make upgrade_db && python run_gunicorn.py'
    environment:
      - INVENTORY_DB_HOST=db
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - KAFKA_TOPIC=platform.system_profile
        KAFKA_GROUP=inventory
      - INVENTORY_LOG_LEVEL=DEBUG
      - KAFKA_SECONDARY_TOPIC_ENABLED=True
      - LISTEN_PORT=8081
    ports:
      - 8081:8081
    depends_on:
      - db
      - kafka
    links:
      - db
      - kafka
  compliance-ssg:
    image: quay.io/cloudservices/compliance-ssg
    restart: on-failure
    environment:
      - NGINX_PORT=8088
    ports:
      - 8088:8088
  #
  # NOTE: The following two 'services' are only required for a new DB
  # Feel free to comment them out for subsequent use
  #
  build-rails-db:
    image: compliance-backend-rails
    entrypoint: ''
    command: sh -c '
      if bundle exec rake db:version 2> /dev/null; then
        bundle exec rake --trace db:migrate;
      else
        bundle exec rake --trace db:setup;
      fi;
      RAILS_ENV=test bundle exec rake --trace db:create;
      RAILS_ENV=test bundle exec rake --trace db:test:prepare;
      echo "Setting up Cyndi data in the development DB";
      bundle exec rails db -p < db/cyndi_setup_devel.sql;
      echo "Setting up Cyndi data in the test DB";
      RAILS_ENV=test bundle exec rails db -p < db/cyndi_setup_test.sql;
      '
    tmpfs:
      - /app/log
      - /app/tmp
    volumes:
      - .:/app:z
    depends_on:
      - db
    links:
      - db
    environment:
      - POSTGRESQL_TEST_DATABASE=compliance_test
      - ACG_CONFIG=/app/devel.json
  import-ssg:
    image: compliance-backend-rails
    entrypoint: ''
    command: 'bundle exec rake ssg:import_rhel_supported'
    restart: on-failure
    tmpfs:
      - /app/log
      - /app/tmp
    volumes:
      - .:/app:z
    depends_on:
      - db
      - compliance-ssg
      - build-rails-db
    links:
      - db
      - compliance-ssg
    environment:
      - POSTGRESQL_TEST_DATABASE=compliance_test
      - RAILS_LOG_TO_STDOUT=true
      - ACG_CONFIG=/app/devel.json
  rails:
    env_file: .env
    build:
      context: .
      dockerfile: devel.Dockerfile
    image: compliance-backend-rails
    tty: true
    stdin_open: true
    restart: on-failure
    environment:
      - POSTGRESQL_TEST_DATABASE=compliance_test
      - DISABLE_DATABASE_ENVIRONMENT_CHECK=1
      - HOSTNAME=rails
      - ACG_CONFIG=/app/devel.json
      - SWAGGER_DRY_RUN=0
    ports:
      - 3000:3000
    tmpfs:
      - /app/log
      - /app/tmp
    volumes:
      - .:/app:z
    depends_on:
      - db
      - redis
      - rbac
      - compliance-ssg
      - import-ssg
    links:
      - db
      - redis
      - rbac
      - compliance-ssg
  inventory-consumer:
    image: compliance-backend-rails
    restart: on-failure
    entrypoint: ''
    command: 'bundle exec racecar -l log/inventory-consumer.log InventoryEventsConsumer'
    environment:
      - POSTGRESQL_TEST_DATABASE=compliance_test
      - DISABLE_DATABASE_ENVIRONMENT_CHECK=1
      - HOSTNAME=inventory-consumer
      - ACG_CONFIG=/app/devel.json
    tmpfs:
      - /app/log
      - /app/tmp
    volumes:
      - .:/app:z
    depends_on:
      - db
      - rbac
      - kafka
    links:
      - db
      - rbac
      - kafka
  sidekiq:
    image: compliance-backend-rails
    restart: on-failure
    tmpfs:
      - /app/log
      - /app/tmp
    volumes:
      - .:/app:z
    depends_on:
      - redis
      - rbac
    links:
      - redis
      - rbac
    command: bundle exec sidekiq
    environment:
      - MALLOC_ARENA_MAX=2
      - POSTGRESQL_TEST_DATABASE=compliance_test
      - SIDEKIQ_CONCURRENCY=1
      - HOSTNAME=sidekiq
      - ACG_CONFIG=/app/devel.json
  redis:
    image: quay.io/cloudservices/redis:latest
    ports:
      - 6379:6379
