---
apiVersion: v1
kind: Template
metadata:
  name: "${APP_NAME}"
objects:
- apiVersion: cloud.redhat.com/v1alpha1
  kind: ClowdApp
  metadata:
    name: "${APP_NAME}"
    annotations:
      ${LINT_ANNOTATION}: "minimum three replicas not required"
  spec:
    envName: ${ENV_NAME}
    testing:
      iqePlugin: compliance
    dependencies:
    - compliance-ssg
    - host-inventory
    - ingress
    - rbac
    database:
      name: compliance
      version: 12
    kafkaTopics:
      - topicName: platform.upload.compliance
        partitions: 1
      - topicName: platform.payload-status
        partitions: 1
      - topicName: platform.inventory.events
        partitions: 1
      - topicName: platform.remediation-updates.compliance
        partitions: 1
      - topicName: platform.notifications.ingress
        partitions: 1
    inMemoryDb: true
    cyndi:
      enabled: true
      appName: "compliance"
      insightsOnly: true
    jobs:
    - name: import-ssg
      schedule: ${IMPORT_SSG_SCHEDULE}
      concurrencyPolicy: Forbid
      podSpec:
        image: ${IMAGE}:${IMAGE_TAG}
        initContainers:
        - command: ["/bin/sh"]
          args: ["-c", "$HOME/scripts/abort_if_pending_migrations.sh"]
          inheritEnv: true
        resources:
          limits:
            cpu: ${CPU_LIMIT_IMPORT_SSG}
            memory: ${MEMORY_LIMIT_IMPORT_SSG}
          requests:
            cpu: ${CPU_REQUEST_IMPORT_SSG}
            memory: ${MEMORY_REQUEST_IMPORT_SSG}
        env:
        - name: APPLICATION_TYPE
          value: compliance-import-ssg
        - name: RAILS_ENV
          value: "${RAILS_ENV}"
        - name: RAILS_LOG_TO_STDOUT
          value: "${RAILS_LOG_TO_STDOUT}"
        - name: PATH_PREFIX
          value: "${PATH_PREFIX}"
        - name: APP_NAME
          value: "${APP_NAME}"
        - name: SECRET_KEY_BASE
          valueFrom:
            secretKeyRef:
              name: compliance-backend
              key: secret_key_base
        - name: SETTINGS__SLACK_WEBHOOK
          valueFrom:
            secretKeyRef:
              name: compliance-backend
              key: slack_webhook
              optional: true
        - name: SETTINGS__REPORT_DOWNLOAD_SSL_ONLY
          value: ${SETTINGS__REPORT_DOWNLOAD_SSL_ONLY}
        - name: SETTINGS__FORCE_IMPORT_SSGS
          value: "${SETTINGS__FORCE_IMPORT_SSGS}"
        - name: MAX_INIT_TIMEOUT_SECONDS
          value: "${MAX_INIT_TIMEOUT_SECONDS}"
        - name: PRIMARY_REDIS_AS_CACHE
          value: "${PRIMARY_REDIS_AS_CACHE}"
        - name: SETTINGS__REDIS_CACHE_SSL
          value: "${REDIS_SSL}"
        - name: SETTINGS__REDIS_CACHE_HOSTNAME
          valueFrom:
            secretKeyRef:
              name: compliance-rails-cache
              key: db.endpoint
              optional: true
        - name: SETTINGS__REDIS_CACHE_PORT
          valueFrom:
            secretKeyRef:
              name: compliance-rails-cache
              key: db.port
              optional: true
        - name: SETTINGS__REDIS_CACHE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: compliance-rails-cache
              key: db.auth_token
              optional: true
        livenessProbe:
          exec:
            command: ["pgrep" ,"-f", "rake"]
    deployments:
    - name: service
      minReplicas: ${{REPLICAS_BACKEND}}
      deploymentStrategy:
        privateStrategy: RollingUpdate
      webServices:
        public:
          enabled: true
          apiPath: compliance
      podSpec:
        image: ${IMAGE}:${IMAGE_TAG}
        initContainers:
        - command: ["/bin/sh"]
          args: ["-c", "$HOME/scripts/check_migration_status_and_ssg_synced.sh"]
          inheritEnv: true
        env:
        - name: APPLICATION_TYPE
          value: compliance-backend
        - name: RAILS_ENV
          value: "${RAILS_ENV}"
        - name: PATH_PREFIX
          value: "${PATH_PREFIX}"
        - name: APP_NAME
          value: "${APP_NAME}"
        - name: RAILS_LOGLEVEL
          value: "${RAILS_LOGLEVEL}"
        - name: RAILS_LOG_TO_STDOUT
          value: "${RAILS_LOG_TO_STDOUT}"
        - name: SETTINGS__REDIS_SSL
          value: "${REDIS_SSL}"
        - name: SETTINGS__REDIS_CACHE_SSL
          value: "${REDIS_SSL}"
        - name: SETTINGS__DISABLE_RBAC
          value: ${DISABLE_RBAC}
        - name: PUMA_WORKERS
          value: "${PUMA_WORKERS}"
        - name: PUMA_MAX_THREADS
          value: "${PUMA_MAX_THREADS}"
        - name: OLD_PATH_PREFIX
          value: "${OLD_PATH_PREFIX}"
        - name: SECRET_KEY_BASE
          valueFrom:
            secretKeyRef:
              name: compliance-backend
              key: secret_key_base
        - name: SETTINGS__SLACK_WEBHOOK
          valueFrom:
            secretKeyRef:
              name: compliance-backend
              key: slack_webhook
              optional: true
        - name: SETTINGS__REPORT_DOWNLOAD_SSL_ONLY
          value: ${SETTINGS__REPORT_DOWNLOAD_SSL_ONLY}
        - name: MAX_INIT_TIMEOUT_SECONDS
          value: "${MAX_INIT_TIMEOUT_SECONDS}"
        - name: PRIMARY_REDIS_AS_CACHE
          value: "${PRIMARY_REDIS_AS_CACHE}"
        - name: SETTINGS__REDIS_CACHE_HOSTNAME
          valueFrom:
            secretKeyRef:
              name: compliance-rails-cache
              key: db.endpoint
              optional: true
        - name: SETTINGS__REDIS_CACHE_PORT
          valueFrom:
            secretKeyRef:
              name: compliance-rails-cache
              key: db.port
              optional: true
        - name: SETTINGS__REDIS_CACHE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: compliance-rails-cache
              key: db.auth_token
              optional: true
        # If we can configure the metrics endpoint to listen to 9000 this definitions should go away
        livenessProbe:
          httpGet:
            path: /api/compliance/v1/openapi.json
            port: web
          initialDelaySeconds: 5
        readinessProbe:
          httpGet:
            path: /api/compliance/v1/status
            port: web
          initialDelaySeconds: 5
        resources:
          limits:
            cpu: ${CPU_LIMIT_SERV}
            memory: ${MEMORY_LIMIT_SERV}
          requests:
            cpu: ${CPU_REQUEST_SERV}
            memory: ${MEMORY_REQUEST_SERV}
    - name: inventory-consumer
      # TODO: check requirement for RDS CA and Kafka Cert with Clowder
      minReplicas: ${{REPLICAS_CONSUMER}}
      deploymentStrategy:
        privateStrategy: RollingUpdate
      podSpec:
        image: ${IMAGE}:${IMAGE_TAG}
        initContainers:
        - command: ["/bin/sh"]
          args: ["-c", "$HOME/scripts/check_migration_status_and_ssg_synced.sh"]
          inheritEnv: true
        env:
        - name: APPLICATION_TYPE
          value: compliance-inventory
        - name: RAILS_ENV
          value: "${RAILS_ENV}"
        - name: RAILS_LOG_TO_STDOUT
          value: "${RAILS_LOG_TO_STDOUT}"
        - name: PATH_PREFIX
          value: "${PATH_PREFIX}"
        - name: APP_NAME
          value: "${APP_NAME}"
        - name: RACECAR_MIN_MESSAGE_QUEUE_SIZE
          value: "${RACECAR_QUEUE_SIZE}"
        - name: RACECAR_OFFSET_COMMIT_INTERVAL
          value: "${RACECAR_OFFSET_COMMIT_INTERVAL}"
        - name: SETTINGS__REDIS_SSL
          value: "${REDIS_SSL}"
        - name: SETTINGS__REDIS_CACHE_SSL
          value: "${REDIS_SSL}"
        - name: SECRET_KEY_BASE
          valueFrom:
            secretKeyRef:
              name: compliance-backend
              key: secret_key_base
        - name: SETTINGS__SLACK_WEBHOOK
          valueFrom:
            secretKeyRef:
              name: compliance-backend
              key: slack_webhook
              optional: true
        - name: SETTINGS__REPORT_DOWNLOAD_SSL_ONLY
          value: ${SETTINGS__REPORT_DOWNLOAD_SSL_ONLY}
        - name: MAX_INIT_TIMEOUT_SECONDS
          value: "${MAX_INIT_TIMEOUT_SECONDS}"
        - name: PRIMARY_REDIS_AS_CACHE
          value: "${PRIMARY_REDIS_AS_CACHE}"
        - name: SETTINGS__REDIS_CACHE_HOSTNAME
          valueFrom:
            secretKeyRef:
              name: compliance-rails-cache
              key: db.endpoint
              optional: true
        - name: SETTINGS__REDIS_CACHE_PORT
          valueFrom:
            secretKeyRef:
              name: compliance-rails-cache
              key: db.port
              optional: true
        - name: SETTINGS__REDIS_CACHE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: compliance-rails-cache
              key: db.auth_token
              optional: true
        livenessProbe:
          httpGet:
            path: /metrics
            port: metrics
          timeoutSeconds: 5
        readinessProbe:
          timeoutSeconds: 5
          exec:
            command: ["bash", "-c", "bundle exec rake --trace db:status redis:status kafka:status"]
        resources:
          limits:
            cpu: ${CPU_LIMIT_CONS}
            memory: ${MEMORY_LIMIT_CONS}
          requests:
            cpu: ${CPU_REQUEST_CONS}
            memory: ${MEMORY_REQUEST_CONS}
    - name: sidekiq
      minReplicas: ${{REPLICAS_SIDEKIQ}}
      deploymentStrategy:
        privateStrategy: RollingUpdate
      podSpec:
        image: ${IMAGE}:${IMAGE_TAG}
        initContainers:
        - command: ["/bin/sh"]
          args: ["-c", "$HOME/scripts/check_migration_status_and_ssg_synced.sh"]
          inheritEnv: true
        resources:
          limits:
            cpu: ${CPU_LIMIT_SIDE}
            memory: ${MEMORY_LIMIT_SIDE}
          requests:
            cpu: ${CPU_REQUEST_SIDE}
            memory: ${MEMORY_REQUEST_SIDE}
        livenessProbe:
          httpGet:
            path: /metrics
            port: metrics
          timeoutSeconds: 5
        readinessProbe:
          timeoutSeconds: 5
          exec:
            command: ["bash", "-c", "bundle exec rake --trace db:status redis:status"]
        env:
        - name: APPLICATION_TYPE
          value: compliance-sidekiq
        - name: RAILS_ENV
          value: "${RAILS_ENV}"
        - name: RAILS_LOG_TO_STDOUT
          value: "${RAILS_LOG_TO_STDOUT}"
        - name: PATH_PREFIX
          value: "${PATH_PREFIX}"
        - name: APP_NAME
          value: "${APP_NAME}"
        - name: SIDEKIQ_CONCURRENCY
          value: "${SIDEKIQ_CONCURRENCY}"
        - name: SETTINGS__REDIS_SSL
          value: "${REDIS_SSL}"
        - name: SETTINGS__REDIS_CACHE_SSL
          value: "${REDIS_SSL}"
        - name: RAILS_MAX_THREADS
          value: "${RAILS_MAX_THREADS}"
        - name: SECRET_KEY_BASE
          valueFrom:
            secretKeyRef:
              name: compliance-backend
              key: secret_key_base
        - name: SETTINGS__SLACK_WEBHOOK
          valueFrom:
            secretKeyRef:
              name: compliance-backend
              key: slack_webhook
              optional: true
        - name: SETTINGS__REPORT_DOWNLOAD_SSL_ONLY
          value: ${SETTINGS__REPORT_DOWNLOAD_SSL_ONLY}
        - name: MAX_INIT_TIMEOUT_SECONDS
          value: "${MAX_INIT_TIMEOUT_SECONDS}"
        - name: PRIMARY_REDIS_AS_CACHE
          value: "${PRIMARY_REDIS_AS_CACHE}"
        - name: SETTINGS__REDIS_CACHE_HOSTNAME
          valueFrom:
            secretKeyRef:
              name: compliance-rails-cache
              key: db.endpoint
              optional: true
        - name: SETTINGS__REDIS_CACHE_PORT
          valueFrom:
            secretKeyRef:
              name: compliance-rails-cache
              key: db.port
              optional: true
        - name: SETTINGS__REDIS_CACHE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: compliance-rails-cache
              key: db.auth_token
              optional: true

- apiVersion: metrics.console.redhat.com/v1alpha1
  kind: FloorPlan
  metadata:
    name: compliance
  spec:
    database:
      secretName: ${FLOORIST_DB_SECRET_NAME}
    objectStore:
      secretName: ${FLOORIST_BUCKET_SECRET_NAME}
    logLevel: ${FLOORIST_LOGLEVEL}
    suspend: ${{FLOORIST_SUSPEND}}
    queries:
    - prefix: insights/compliance/policies
      query: >-
        SELECT DISTINCT
          "policies"."id",
          "profiles"."ref_id",
          "profiles"."name",
          "accounts"."account_number",
          REGEXP_REPLACE("benchmarks"."ref_id", '.*RHEL-(\d)$', '\1') AS "os_major_version"
          FROM "policies"
          INNER JOIN "profiles" ON "profiles"."policy_id" = "policies"."id"
          INNER JOIN "accounts" ON "accounts"."id" = "policies"."account_id"
          INNER JOIN "benchmarks" ON "benchmarks"."id" = "profiles"."benchmark_id";
    - prefix: insights/compliance/policy_hosts
      query: >-
        SELECT "policy_hosts"."host_id", "policy_hosts"."policy_id" FROM "policy_hosts";

- apiVersion: v1
  kind: Secret
  type: Opaque
  metadata:
    name: compliance-backend
  data:
    # This secret is only mounted in ephemeral environments, for any other deployment it is already
    # mounted and available. Its value is just a placeholder and does contain anything sensitive.
    secret_key_base: 'VGhpcyBpcyBhIHBsYWNlaG9sZGVyIHZhbHVlCg=='

parameters:
- name: IMAGE_TAG
  description: Image tag
  required: true
  value: latest
- name: IMAGE
  description: Image name
  value: quay.io/cloudservices/compliance-backend
- name: ENV_NAME
  description: ClowdEnv Name
- name: REPLICAS_BACKEND
  description: Replica count for backend service
  value: "1"
- name: REPLICAS_CONSUMER
  description: Replica count for consumer
  value: "1"
- name: REPLICAS_SIDEKIQ
  description: Replica count for sidekiq
  value: "1"
- name: LINT_ANNOTATION
  value: 'default-lint-annotation-value'
- name: RAILS_ENV
  required: true
  value: production
- name: PATH_PREFIX
  required: true
  value: /api
- name: RAILS_LOGLEVEL
  value: 'info'
- name: RAILS_LOG_TO_STDOUT
  value: "true"
- name: APP_NAME
  required: true
  value: compliance
- name: MEMORY_LIMIT_PROM
  value: 300Mi
- name: MEMORY_REQUEST_PROM
  value: 200Mi
- name: CPU_LIMIT_PROM
  value: 400m
- name: CPU_REQUEST_PROM
  value: 100m
- name: MEMORY_LIMIT_SERV
  value: 800Mi
- name: MEMORY_REQUEST_SERV
  value: 400Mi
- name: CPU_LIMIT_SERV
  value: 700m
- name: CPU_REQUEST_SERV
  value: 400m
- name: MEMORY_LIMIT_CONS
  value: 800Mi
- name: MEMORY_REQUEST_CONS
  value: 400Mi
- name: CPU_LIMIT_CONS
  value: 500m
- name: CPU_REQUEST_CONS
  value: 50m
- name: MEMORY_LIMIT_SIDE
  value: 1000Mi
- name: MEMORY_REQUEST_SIDE
  value: 500Mi
- name: CPU_LIMIT_SIDE
  value: 1000m
- name: CPU_REQUEST_SIDE
  value: 100m
- name: MEMORY_LIMIT_FLOO
  value: 200Mi
- name: MEMORY_REQUEST_FLOO
  value: 100Mi
- name: CPU_LIMIT_FLOO
  value: 100m
- name: CPU_REQUEST_FLOO
  value: 50m
- name: MEMORY_LIMIT_IMPORT_SSG
  value: 1000Mi
- name: MEMORY_REQUEST_IMPORT_SSG
  value: 500Mi
- name: CPU_LIMIT_IMPORT_SSG
  value: 1000m
- name: CPU_REQUEST_IMPORT_SSG
  value: 300m
- name: REDIS_SSL
  description: 'Whether to use secured connection to Redis. Use string values of true or false'
  value: "true"
- name: PUMA_MAX_THREADS
  value: "5"
- name: RACECAR_OFFSET_COMMIT_INTERVAL
  required: true
  value: "5"
- name: RACECAR_QUEUE_SIZE
  required: true
  value: "5"
- name: SIDEKIQ_CONCURRENCY
  value: "1"
- name: RAILS_MAX_THREADS
  value: "1"
- name: DISABLE_RBAC
  value: "false"
- name: PUMA_WORKERS
  value: "2"
- name: PUMA_MAX_THREADS
  value: "5"
- name: OLD_PATH_PREFIX
  value: /r/insights/platform
- name: SETTINGS__FORCE_IMPORT_SSGS
  value: "false"
- name: SETTINGS__REPORT_DOWNLOAD_SSL_ONLY
  value: "true"
- name: FLOORIST_SUSPEND
  description: Disable Floorist cronjob execution
  required: true
  value: 'true'
- description: database secret name
  name: FLOORIST_DB_SECRET_NAME
  value: compliance-db
- description: bucket secret name
  name: FLOORIST_BUCKET_SECRET_NAME
  required: true
  value: dummy-secret
- name: FLOORIST_LOGLEVEL
  description: Floorist loglevel config
  value: 'INFO'
- name: IMPORT_SSG_SCHEDULE
  description: Cronjob schedule for import-ssg
  value: "*/5 * * * *" # every 5 minutes
- name: MAX_INIT_TIMEOUT_SECONDS
  description: Number of seconds for timeout init container operation
  value: "120"
- name: PRIMARY_REDIS_AS_CACHE
  description: Whether to use the clowder-provided Redis as cache or not
  value: 'false'
