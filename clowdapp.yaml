---
apiVersion: v1
kind: Template
metadata:
  name: "${APP_NAME}"
objects:
- apiVersion: cloud.redhat.com/v1alpha1
  kind: ClowdApp
  metadata:
    name: "${APP_NAME}"
  spec:
    envName: ${ENV_NAME}
    testing:
      iqePlugin: compliance
    dependencies:
    - compliance-ssg
    - host-inventory
    - ingress
    - rbac
    database:
      name: compliance
      version: 12
    kafkaTopics:
      - topicName: platform.upload.compliance
        partitions: 1
      - topicName: platform.payload-status
        partitions: 1
      - topicName: platform.inventory.events
        partitions: 1
      - topicName: platform.remediation-updates.compliance
        partitions: 1
    inMemoryDb: true
    cyndi:
      enabled: true
      appName: "compliance"
      insightsOnly: true
    jobs:
    - name: import-ssg
      schedule: "*/5 * * * *" # every 5 minutes
      concurrencyPolicy: Forbid
      podSpec:
        image: ${IMAGE}:${IMAGE_TAG}
        initContainers:
        - command:
            - bash
            - -c
            - |
              for i in {1..120}; do sleep 1;
              if bundle exec rake --trace db:abort_if_pending_migrations;
              then exit 0; fi; done; exit 1
          inheritEnv: true
        resources:
          limits:
            cpu: ${CPU_LIMIT_SIDE}
            memory: ${MEMORY_LIMIT_SIDE}
          requests:
            cpu: ${CPU_REQUEST_SIDE}
            memory: ${MEMORY_REQUEST_SIDE}
        env:
        - name: APPLICATION_TYPE
          value: compliance-import-ssg
        - name: RAILS_ENV
          value: "${RAILS_ENV}"
        - name: RAILS_LOG_TO_STDOUT
          value: "${RAILS_LOG_TO_STDOUT}"
        - name: PATH_PREFIX
          value: "${PATH_PREFIX}"
        - name: APP_NAME
          value: "${APP_NAME}"
        - name: JOBS_ACCOUNT_NUMBER
          value: ${JOBS_ACCOUNT_NUMBER}
        # Should be a secret ?
        - name: SECRET_KEY_BASE
          value: "secret_key_base"
        - name: SETTINGS__REPORT_DOWNLOAD_SSL_ONLY
          value: ${SETTINGS__REPORT_DOWNLOAD_SSL_ONLY}
        - name: SETTINGS__FORCE_IMPORT_SSGS
          value: "${SETTINGS__FORCE_IMPORT_SSGS}"
        livenessProbe:
          exec:
            command:
              - bash
              - -c
              - ps ax | grep [r]ake
    - name: floorist
      schedule: ${FLOORIST_SCHEDULE}
      suspend: ${{FLOORIST_SUSPEND}}
      concurrencyPolicy: Forbid
      podSpec:
        image: ${FLOORIST_IMAGE}:${FLOORIST_IMAGE_TAG}
        env:
        - name: AWS_BUCKET
          valueFrom:
            secretKeyRef:
              name: ${FLOORIST_BUCKET_SECRET_NAME}
              key: bucket
        - name: AWS_REGION
          valueFrom:
            secretKeyRef:
              name: ${FLOORIST_BUCKET_SECRET_NAME}
              key: aws_region
        - name: AWS_ENDPOINT
          valueFrom:
            secretKeyRef:
              name: ${FLOORIST_BUCKET_SECRET_NAME}
              key: endpoint
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: ${FLOORIST_BUCKET_SECRET_NAME}
              key: aws_access_key_id
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: ${FLOORIST_BUCKET_SECRET_NAME}
              key: aws_secret_access_key
        - name: FLOORPLAN_FILE
          value: "/tmp/floorplan/floorplan.yaml"
        - name: LOGLEVEL
          value: ${FLOORIST_LOGLEVEL}
        livenessProbe:
          exec:
            command:
              - bash
              - -c
              - ps ax | grep [r]un
        volumeMounts:
        - name: floorplan-volume
          mountPath: "/tmp/floorplan"
        volumes:
          - name: floorplan-volume
            configMap:
              name: floorplan
      resources:
          limits:
            cpu: "${CPU_LIMIT_FLOO}"
            memory: "${MEMORY_LIMIT_FLOO}"
          requests:
            cpu: "${CPU_REQUEST_FLOO}"
            memory: "${MEMORY_REQUEST_FLOO}"
    deployments:
    - name: service
      # TODO: Check how to auto-scale with Clowder
      minReplicas: ${{REPLICAS_BACKEND}}
      webServices:
        public:
          enabled: true
      podSpec:
        image: ${IMAGE}:${IMAGE_TAG}
        initContainers:
        - command:
            - bash
            - -c
            - |
              bundle exec rake --trace db:debug db:migrate ssg:check_synced
          inheritEnv: true
        env:
        - name: APPLICATION_TYPE
          value: compliance-backend
        - name: RAILS_ENV
          value: "${RAILS_ENV}"
        - name: PATH_PREFIX
          value: "${PATH_PREFIX}"
        - name: APP_NAME
          value: "${APP_NAME}"
        - name: RAILS_LOG_TO_STDOUT
          value: "${RAILS_LOG_TO_STDOUT}"
        - name: SETTINGS__REDIS_SSL
          value: "${REDIS_SSL}"
        - name: SETTINGS__REDIS_CACHE_SSL
          value: "${REDIS_SSL}"
        - name: SETTINGS__DISABLE_RBAC
          value: ${DISABLE_RBAC}
        - name: PUMA_WORKERS
          value: "${PUMA_WORKERS}"
        - name: PUMA_MAX_THREADS
          value: "${PUMA_MAX_THREADS}"
        - name: OLD_PATH_PREFIX
          value: "${OLD_PATH_PREFIX}"
        # Should be a secret ?
        - name: SECRET_KEY_BASE
          value: "secret_key_base"
        - name: SETTINGS__REPORT_DOWNLOAD_SSL_ONLY
          value: ${SETTINGS__REPORT_DOWNLOAD_SSL_ONLY}
# If we can configure the metrics endpoint to listen to 9000 this definitions should go away
        livenessProbe:
          httpGet:
            path: /api/compliance/v1/openapi.json
            port: web
          initialDelaySeconds: 5
        readinessProbe:
          httpGet:
            path: /api/compliance/v1/status
            port: web
          initialDelaySeconds: 5
        resources:
          limits:
            cpu: ${CPU_LIMIT_SERV}
            memory: ${MEMORY_LIMIT_SERV}
          requests:
            cpu: ${CPU_REQUEST_SERV}
            memory: ${MEMORY_REQUEST_SERV}
    - name: inventory-consumer
      # TODO: check requirement for RDS CA and Kafka Cert with Clowder
      minReplicas: ${{REPLICAS_CONSUMER}}
      podSpec:
        image: ${IMAGE}:${IMAGE_TAG}
        initContainers:
        - command:
            - bash
            - -c
            - |
              bundle exec rake --trace db:debug db:migrate ssg:check_synced
          inheritEnv: true
        env:
        - name: APPLICATION_TYPE
          value: compliance-inventory
        - name: RAILS_ENV
          value: "${RAILS_ENV}"
        - name: RAILS_LOG_TO_STDOUT
          value: "${RAILS_LOG_TO_STDOUT}"
        - name: PATH_PREFIX
          value: "${PATH_PREFIX}"
        - name: APP_NAME
          value: "${APP_NAME}"
        - name: RACECAR_MIN_MESSAGE_QUEUE_SIZE
          value: "${RACECAR_QUEUE_SIZE}"
        - name: RACECAR_OFFSET_COMMIT_INTERVAL
          value: "${RACECAR_OFFSET_COMMIT_INTERVAL}"
        - name: SETTINGS__REDIS_SSL
          value: "${REDIS_SSL}"
        - name: SETTINGS__REDIS_CACHE_SSL
          value: "${REDIS_SSL}"
        # Should be a secret ?
        - name: SECRET_KEY_BASE
          value: "secret_key_base"
        - name: SETTINGS__REPORT_DOWNLOAD_SSL_ONLY
          value: ${SETTINGS__REPORT_DOWNLOAD_SSL_ONLY}
        livenessProbe:
          httpGet:
            path: /metrics
            port: metrics
          timeoutSeconds: 5
        readinessProbe:
          timeoutSeconds: 5
          exec:
            command:
              - bash
              - -c
              - |
                bundle exec rake --trace db:status redis:status kafka:status
        resources:
          limits:
            cpu: ${CPU_LIMIT_CONS}
            memory: ${MEMORY_LIMIT_CONS}
          requests:
            cpu: ${CPU_REQUEST_CONS}
            memory: ${MEMORY_REQUEST_CONS}

    - name: sidekiq
      # TODO: check requreiment for RDS CA and Kafka Cert with Clowder
      minReplicas: ${{REPLICAS_SIDEKIQ}}
      podSpec:
        image: ${IMAGE}:${IMAGE_TAG}
        initContainers:
        - command:
            - bash
            - -c
            - |
              bundle exec rake --trace db:debug db:migrate ssg:check_synced
          inheritEnv: true
        resources:
          limits:
            cpu: ${CPU_LIMIT_SIDE}
            memory: ${MEMORY_LIMIT_SIDE}
          requests:
            cpu: ${CPU_REQUEST_SIDE}
            memory: ${MEMORY_REQUEST_SIDE}
        livenessProbe:
          httpGet:
            path: /metrics
            port: metrics
          timeoutSeconds: 5
        readinessProbe:
          timeoutSeconds: 5
          exec:
            command:
              - bash
              - -c
              - |
                bundle exec rake --trace db:status redis:status
        env:
        - name: APPLICATION_TYPE
          value: compliance-sidekiq
        - name: RAILS_ENV
          value: "${RAILS_ENV}"
        - name: RAILS_LOG_TO_STDOUT
          value: "${RAILS_LOG_TO_STDOUT}"
        - name: PATH_PREFIX
          value: "${PATH_PREFIX}"
        - name: APP_NAME
          value: "${APP_NAME}"
        - name: SIDEKIQ_CONCURRENCY
          value: "${SIDEKIQ_CONCURRENCY}"
        - name: SETTINGS__REDIS_SSL
          value: "${REDIS_SSL}"
        - name: SETTINGS__REDIS_CACHE_SSL
          value: "${REDIS_SSL}"
        - name: RAILS_MAX_THREADS
          value: "${RAILS_MAX_THREADS}"
        - name: JOBS_ACCOUNT_NUMBER
          value: ${JOBS_ACCOUNT_NUMBER}
        # Should be a secret ?
        - name: SECRET_KEY_BASE
          value: "secret_key_base"
        - name: SETTINGS__REPORT_DOWNLOAD_SSL_ONLY
          value: ${SETTINGS__REPORT_DOWNLOAD_SSL_ONLY}

- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: floorplan
  data:
    floorplan.yaml: |
      - prefix: insights/compliance/hosts
        query: >-
          SELECT
            "inventory"."hosts"."id",
            "accounts"."account_number",
            "inventory"."hosts"."created" AS "created_at",
            "inventory"."hosts"."updated" AS "updated_at",
            "inventory"."hosts"."system_profile"->'operating_system'->'major' AS "os_major_version",
            "inventory"."hosts"."system_profile"->'operating_system'->'minor' AS "os_minor_version"
            FROM "inventory"."hosts"
            INNER JOIN "accounts" ON "accounts"."account_number" = "inventory"."hosts"."account"
            WHERE ("inventory"."hosts"."id" IN (SELECT "policy_hosts"."host_id" FROM "policy_hosts")
              OR "inventory"."hosts"."id" IN (SELECT "test_results"."host_id" FROM "test_results"));
      - prefix: insights/compliance/policies
        query: >-
          SELECT DISTINCT
            "policies"."id",
            "profiles"."ref_id",
            "profiles"."name",
            "accounts"."account_number",
            REGEXP_REPLACE("benchmarks"."ref_id", '.*RHEL-(\d)$', '\1') AS "os_major_version"
            FROM "policies"
            INNER JOIN "profiles" ON "profiles"."policy_id" = "policies"."id"
            INNER JOIN "accounts" ON "accounts"."id" = "policies"."account_id"
            INNER JOIN "benchmarks" ON "benchmarks"."id" = "profiles"."benchmark_id";
      - prefix: insights/compliance/policy_hosts
        query: >-
          SELECT "policy_hosts"."host_id", "policy_hosts"."policy_id" FROM "policy_hosts";

parameters:
- name: IMAGE_TAG
  description: Image tag
  required: true
  value: latest
- name: IMAGE
  description: Image name
  value: quay.io/cloudservices/compliance-backend
- name: ENV_NAME
  description: ClowdEnv Name
- name: REPLICAS_BACKEND
  description: Replica count for backend service
  value: "1"
- name: REPLICAS_CONSUMER
  description: Replica count for consumer
  value: "1"
- name: REPLICAS_SIDEKIQ
  description: Replica count for sidekiq
  value: "1"
- name: RAILS_ENV
  required: true
  value: production
- name: PATH_PREFIX
  required: true
  value: /api
- name: RAILS_LOG_TO_STDOUT
  value: "true"
- name: APP_NAME
  required: true
  value: compliance
- name: MEMORY_LIMIT_PROM
  value: 300Mi
- name: MEMORY_REQUEST_PROM
  value: 200Mi
- name: CPU_LIMIT_PROM
  value: 400m
- name: CPU_REQUEST_PROM
  value: 100m
- name: MEMORY_LIMIT_SERV
  value: 800Mi
- name: MEMORY_REQUEST_SERV
  value: 400Mi
- name: CPU_LIMIT_SERV
  value: 700m
- name: CPU_REQUEST_SERV
  value: 400m
- name: MEMORY_LIMIT_CONS
  value: 800Mi
- name: MEMORY_REQUEST_CONS
  value: 400Mi
- name: CPU_LIMIT_CONS
  value: 500m
- name: CPU_REQUEST_CONS
  value: 50m
- name: MEMORY_LIMIT_SIDE
  value: 1000Mi
- name: MEMORY_REQUEST_SIDE
  value: 500Mi
- name: CPU_LIMIT_SIDE
  value: 1000m
- name: CPU_REQUEST_SIDE
  value: 100m
- name: MEMORY_LIMIT_FLOO
  value: 200Mi
- name: MEMORY_REQUEST_FLOO
  value: 100Mi
- name: CPU_LIMIT_FLOO
  value: 100m
- name: CPU_REQUEST_FLOO
  value: 50m
- name: REDIS_SSL
  description: 'Whether to use secured connection to Redis. Use string values of true or false'
  value: "true"
- name: PUMA_MAX_THREADS
  value: "5"
- name: RACECAR_OFFSET_COMMIT_INTERVAL
  required: true
  value: "5"
- name: RACECAR_QUEUE_SIZE
  required: true
  value: "5"
- name: SIDEKIQ_CONCURRENCY
  value: "1"
- name: JOBS_ACCOUNT_NUMBER
  displayName: "Account number used in the import remediations job"
  value: "6212377"
  required: true
- name: RAILS_MAX_THREADS
  value: "1"
- name: DISABLE_RBAC
  value: "false"
- name: PUMA_WORKERS
  value: "3"
- name: PUMA_MAX_THREADS
  value: "5"
- name: OLD_PATH_PREFIX
  value: /r/insights/platform
- name: SETTINGS__FORCE_IMPORT_SSGS
  value: "false"
- name: SETTINGS__REPORT_DOWNLOAD_SSL_ONLY
  value: "true"
- name: FLOORIST_SCHEDULE
  description: Cronjob schedule definition
  required: true
- name: FLOORIST_SUSPEND
  description: Disable Floorist cronjob execution
  required: true
  value: 'true'
- description: Floorist image name
  name: FLOORIST_IMAGE
  value: quay.io/cloudservices/floorist
- description: Floorist Image tag
  name: FLOORIST_IMAGE_TAG
  required: true
  value: latest
- description: bucket secret name
  name: FLOORIST_BUCKET_SECRET_NAME
  required: true
  value: dummy-secret
- name: FLOORIST_LOGLEVEL
  description: Floorist loglevel config
  value: 'INFO'
