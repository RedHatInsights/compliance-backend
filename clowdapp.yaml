---
apiVersion: v1
kind: Template
metadata:
  name: "${APP_NAME}"
objects:
- apiVersion: cloud.redhat.com/v1alpha1
  kind: ClowdApp
  metadata:
    name: "${APP_NAME}"
  spec:
    envName: ${ENV_NAME}
    dependencies:
    - host-inventory
    - ingress
    - rbac
#  blocked https://issues.redhat.com/browse/RHCLOUD-10212
#    - remediations
    database:
      name: compliance
      version: 12
    kafkaTopics:
      - topicName: platform.upload.compliance
        partitions: 1
      - topicName: platform.payload-status
        partitions: 1
      - topicName: platform.inventory.events
        partitions: 1
      - topicName: platform.remediations.events
        partitions: 1
    inMemoryDb: true
#    optionalDependencies:
#    - remediations
    cyndi:
      enabled: true
      appName: "compliance"
      insightsOnly: true
    deployments:
    - name: service
      # TODO: Check how to auto-scale with Clowder
      minReplicas: ${{REPLICAS_SERVICE}}
      webServices:
        public:
          enabled: true
      podSpec:
        image: ${IMAGE}:${IMAGE_TAG}
        initContainers:
        - name: wait-on-migrations
          image: " "
          imagePullPolicy: Always
          command:
            - bash
            - -c
            - |
              for i in {1..120}; do sleep 1;
              if bundle exec rake --trace db:abort_if_pending_migrations;
              then exit 0; fi; done; exit 1
          env:
          - name: RAILS_ENV
            value: "${RAILS_ENV}"
          - name: PATH_PREFIX
            value: "${PATH_PREFIX}"
        env:
        - name: APPLICATION_TYPE
          value: compliance-backend
        - name: RAILS_ENV
          value: "${RAILS_ENV}"
        - name: PATH_PREFIX
          value: "${PATH_PREFIX}"
        - name: APP_NAME
          value: "${APP_NAME}"
        - name: RAILS_LOG_TO_STDOUT
          value: "${RAILS_LOG_TO_STDOUT}"
        - name: SETTINGS__REDIS_SSL
          value: "${REDIS_SSL}"
        - name: SETTINGS__REDIS_CACHE_SSL
          value: "${REDIS_SSL}"
        - name: SETTINGS__DISABLE_RBAC
          value: ${DISABLE_RBAC}
        - name: PUMA_WORKERS
          value: "${PUMA_WORKERS}"
        - name: PUMA_MAX_THREADS
          value: "${PUMA_MAX_THREADS}"
        - name: OLD_PATH_PREFIX
          value: "${OLD_PATH_PREFIX}"
# If we can configure the metrics endpoint to listen to 9000 this definitions should go away
        livenessProbe:
          httpGet:
            path: /api/compliance/v1/openapi.json
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 5
        readinessProbe:
          httpGet:
            path: /api/compliance/v1/status
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 5
        resources:
          limits:
            cpu: "${CPU_LIMIT_SERV}"
            memory: "${MEMORY_LIMIT_SERV}"
          requests:
            cpu: "${CPU_REQUEST_SERV}"
            memory: "${MEMORY_REQUEST_SERV}"
    - name: prometheus-exporter
      minReplicas: ${{REPLICAS_PROMETHEUS}}
#      webServices:
#        public:
#          enabled: true
      podSpec:
        image: ${IMAGE}:${IMAGE_TAG}
        initContainers:
        - name: run-migrations
          image: " "
          imagePullPolicy: Always
          command:
            - bash
            - -c
            - |
              set -e
              RAILS_ENV="${RAILS_ENV}" bundle exec rake --trace db:debug db:migrate
          env:
          - name: RAILS_ENV
            value: "${RAILS_ENV}"
          - name: PATH_PREFIX
            value: "${PATH_PREFIX}"
          - name: RAILS_LOG_TO_STDOUT
            value: "${RAILS_LOG_TO_STDOUT}"
        env:
        - name: APPLICATION_TYPE
          value: compliance-prometheus-exporter
        - name: RAILS_ENV
          value: "${RAILS_ENV}"
        - name: PATH_PREFIX
          value: "${PATH_PREFIX}"
        - name: APP_NAME
          value: "${APP_NAME}"
        - name: RAILS_LOG_TO_STDOUT
          value: "${RAILS_LOG_TO_STDOUT}"
        - name: SETTINGS__REDIS_SSL
          value: "${REDIS_SSL}"
        - name: SETTINGS__REDIS_CACHE_SSL
          value: "${REDIS_SSL}"
# If we can configure the metrics endpoint to listen to 9000 this definitions should go away
        livenessProbe:
          httpGet:
            path: /metrics
            port: 9394
            scheme: HTTP
        readinessProbe:
          httpGet:
            path: /metrics
            port: 9394
            scheme: HTTP
        resources:
          limits:
            cpu: "${CPU_LIMIT_PROM}"
            memory: "${MEMORY_LIMIT_PROM}"
          requests:
            cpu: "${CPU_REQUEST_PROM}"
            memory: "${MEMORY_REQUEST_PROM}"

    - name: compliance-inventory
      # TODO: check requreiment for RDS CA and Kafka Cert with Clowder
      minReplicas: ${{REPLICAS_CONSUMER}}
      podSpec:
        image: ${IMAGE}:${IMAGE_TAG}
        initContainers:
        - name: wait-on-migrations
          image: " "
          imagePullPolicy: Always
          command:
            - bash
            - -c
            - |
              for i in {1..120}; do sleep 1;
              if bundle exec rake --trace db:abort_if_pending_migrations;
              then exit 0; fi; done; exit 1
          env:
          - name: RAILS_ENV
            value: "${RAILS_ENV}"
          - name: PATH_PREFIX
            value: "${PATH_PREFIX}"
          - name: POSTGRESQL_MAX_CONNECTIONS
            value: ${POSTGRESQL_MAX_CONNECTIONS}
          - name: RAILS_LOG_TO_STDOUT
            value: "${RAILS_LOG_TO_STDOUT}"
        env:
        - name: APPLICATION_TYPE
          value: compliance-inventory
        - name: RAILS_ENV
          value: "${RAILS_ENV}"
        - name: RAILS_LOG_TO_STDOUT
          value: "${RAILS_LOG_TO_STDOUT}"
        - name: PATH_PREFIX
          value: "${PATH_PREFIX}"
        - name: APP_NAME
          value: "${APP_NAME}"
        - name: RACECAR_MIN_MESSAGE_QUEUE_SIZE
          value: "${RACECAR_QUEUE_SIZE}"
        - name: RACECAR_OFFSET_COMMIT_INTERVAL
          value: "${RACECAR_OFFSET_COMMIT_INTERVAL}"
        readinessProbe:
          timeoutSeconds: 5
          exec:
            command:
              - bundle
              - exec
              - rake
              - db:status
              - redis:status
              - kafka:status
        resources:
          limits:
            cpu: "${CPU_LIMIT_CONS}"
            memory: "${MEMORY_LIMIT_CONS}"
          requests:
            cpu: "${CPU_REQUEST_CONS}"
            memory: "${MEMORY_REQUEST_CONS}"

    - name: compliance-sidekiq
      # TODO: check requreiment for RDS CA and Kafka Cert with Clowder
      minReplicas: ${{REPLICAS_CONSUMER}}
      podSpec:
        image: ${IMAGE}:${IMAGE_TAG}
        initContainers:
        - name: wait-on-migrations
          image: " "
          imagePullPolicy: Always
          command:
            - bash
            - -c
            - |
              for i in {1..120}; do sleep 1;
              if bundle exec rake --trace db:abort_if_pending_migrations;
              then exit 0; fi; done; exit 1
          env:
          - name: RAILS_ENV
            value: "${RAILS_ENV}"
          - name: PATH_PREFIX
            value: "${PATH_PREFIX}"
          - name: POSTGRESQL_MAX_CONNECTIONS
            value: ${POSTGRESQL_MAX_CONNECTIONS}
          - name: RAILS_LOG_TO_STDOUT
            value: "${RAILS_LOG_TO_STDOUT}"
        env:
        - name: APPLICATION_TYPE
          value: compliance-sidekiq
        - name: RAILS_ENV
          value: "${RAILS_ENV}"
        - name: RAILS_LOG_TO_STDOUT
          value: "${RAILS_LOG_TO_STDOUT}"
        - name: PATH_PREFIX
          value: "${PATH_PREFIX}"
        - name: APP_NAME
          value: "${APP_NAME}"
        - name: SIDEKIQ_CONCURRENCY
          value: "${SIDEKIQ_CONCURRENCY}"
        - name: RAILS_MAX_THREADS
          value: "${RAILS_MAX_THREADS}"
        - name: JOBS_ACCOUNT_NUMBER
          value: ${JOBS_ACCOUNT_NUMBER}
        resources:
          limits:
            cpu: "${CPU_LIMIT_SIDE}"
            memory: "${MEMORY_LIMIT_SIDE}"
          requests:
            cpu: "${CPU_REQUEST_SIDE}"
            memory: "${MEMORY_REQUEST_SIDE}"

parameters:
- name: MIN_REPLICAS
  value: '1'
- description: Image tag
  name: IMAGE_TAG
  required: true
  value: latest-new
- description: Image name
  name: IMAGE
  value: quay.io/cloudservices/compliance-backend
- description: ClowdEnv Name
  name: ENV_NAME
  requred: false
- description: Replica count for prometheus-exporter
  name: REPLICAS_PROMETHEUS
  value: "1"
- description: Replica count for backend service
  name: REPLICAS_SERVICE
  value: "1"
- name: RAILS_ENV
  required: true
  value: production
- name: PATH_PREFIX
  required: true
  value: /api
- name: RAILS_LOG_TO_STDOUT
  value: "true"
- name: APP_NAME
  required: true
  value: compliance
- name: PGSSLMODE
  description: 'Options can be found in the doc: https://www.postgresql.org/docs/current/libpq-ssl.html#LIBPQ-SSL-SSLMODE-STATEMENTS'
  displayName: Postgres SSL mode
  value: verify-full
- name: MEMORY_LIMIT_PROM
  value: 300Mi
- name: MEMORY_REQUEST_PROM
  value: 200Mi
- name: CPU_LIMIT_PROM
  value: 400m
- name: CPU_REQUEST_PROM
  value: 100m
- name: MEMORY_LIMIT_SERV
  value: 800Mi
- name: MEMORY_REQUEST_SERV
  value: 400Mi
- name: CPU_LIMIT_SERV
  value: 700m
- name: CPU_REQUEST_SERV
  value: 400m
- name: MEMORY_LIMIT_CONS
  value: 800Mi
- name: MEMORY_REQUEST_CONS
  value: 400Mi
- name: CPU_LIMIT_CONS
  value: 500m
- name: CPU_REQUEST_CONS
  value: 50m
- name: MEMORY_LIMIT_SIDE
  value: 1000Mi
- name: MEMORY_REQUEST_SIDE
  value: 500Mi
- name: CPU_LIMIT_SIDE
  value: 500m
- name: CPU_REQUEST_SIDE
  value: 50m
- name: REDIS_SSL
  description: 'Whether to use secured connection to Redis. Use string values of true or false'
  value: "true"
- name: PUMA_MAX_THREADS
  value: "5"
- name: POSTGRESQL_MAX_CONNECTIONS
  description: Number of maximum database connections
  value: "50"
- name: RACECAR_OFFSET_COMMIT_INTERVAL
  required: true
  value: "5"
- name: RACECAR_QUEUE_SIZE
  required: true
  value: "5"
- name: SIDEKIQ_CONCURRENCY
  value: "1"
- name: JOBS_ACCOUNT_NUMBER
  displayName: "Account number used in the import remediations job"
  value: "6212377"
  required: true
- name: RAILS_MAX_THREADS
  value: "1"
